/*
1. Goblin Algorithm
DFS Algorithm File: Player.cpp
Function Name:
void Player::dfsGoblinLayout(int x, int y, int s);


Other files that are useful: Goblin.cpp, Dungeon.cpp
Other funtions that are useful:
bool Goblin::move(); bool Monster::makeMove();

// Read this if my algorithm causes any confusion
Explanation:
Instead of using a common practice to implement the DFS algorithm for each goblins, I found it a much better
practice to have the player implmenting a 18 * 70 grid of integers to denote a grid's distance to the player, (I called it goblin map).
This grid stores a grid's distance to the position of the player.
When the dungeon is constructed, they have default value 9999 (unvisited)

This algorithm I implemented is Depth First Search(DFS). Even though a better practice could be BFS, it's not possible to
implement BFS using recursion.

When the player is placed or player make an action, dfsGoblinLayout(x,y,0) is called. It'll first mark the player's position
in goblin map as 0, and then it'll check each possible direction and call,for instance, dfsGoblinLayout(x, y+1, 0+1) to the
neighboring position, which would mark the southern neighboring grid as 1. This recursive algorithm only marks a new number
when s is smaller than what is on goblinmap[y][x] and ends when s = smellDistance

For each goblin, what they need to do is to check whether they are stepping on a node with value in goblin map less than 15.
If so, they will attemp to move by calling makeMove() function. makeMove() is a function defined for all monsters,
it'll check the optimal route for a monster to move.

2.
//(The following are the designs that I didn't notice at first but hard to change later)
//*P.S.1. Instead of calling inventory, I made it called Menu.
//**P.S.2 Using 18 * 70 2D arrays as grids, my x, y are used inversely. e.g. to denote a point (x,y) on grid,
//I have to use, nodes[y][x] instead of nodes[x][y]
//***P.S.3 I called grid node in my implementation, so in Dungeon I have nodes[18][70] instead of grid[18][70]
//****P.S.4 I called GameObjects "items".

Design of My Program
List of Contents:
  2.1 Dungeon
  2.2 Actor
    2.2.1 Monsters
    2.2.1.n Each Monster (int n; n <= 4 && n>=1)
  2.2.2 Player
  2.3 Items
    2.3.1 Weapons
    2.3.2 Scrolls
  2.4 Menu
  2.5 Others

2.1 Dungeon
  Dungeon is the class of the gaming interface and a class integrated features among different class.
  Important Data member: (By saying the important data member, I'm referring to the object that would be deleted when calling
  the destructor):
  vector<Monster*> monsters, Player* p, vector<Item*> items

  1) Two-layer Design
  The dungeon has two layers.
  The first layer on the top is called nodes. It only fills with ' ' or '#', denoting whether or not a monster or player could
  move to this node.
  The second layer is called "itemLayer", which stores all the items in Dungeon.

  During the rendering stage, the first layer's content is displayed first, and only when the node on first layer is ' ',
  the content at the corresponding position in itemLayer would be displayed.

  2) Structs: Room & Coord
  There are two structs used in dungeon.
  Coord, denoted as (x,y) mathematically, are used for storing empty nodes and room generation.
  Room, storing the upper-left and lower-right Coord of a rectangle, is used for room generation.

  3) Empty Nodes
  I used a vector to store nodes with ' ' as their values. This vector is helpful for teleportation and placement of player,
  placement of items and monsters, and corridor generation.

  4) teleportPlayer
  5)

2.2 Actor
  Actor refers to the monsters and the player in this game.
  Important data member: Weapon* wp

  The following is a general feature all actors have
    1) ableMove
      return whether a certain move is hitting the wall or going out of the border. If not, return true
    2) fight
      This function allows an actor to hit another actor. It uses the formula:
      (attacker refers to "this")
      attackerPoints = attackerDexterity + weaponDexterityBonus;
      defenderPoints = defenderDexterity + defenderArmorPoints;
      if (randInt(1, attackerPoints) >= randInt(1, defenderPoints))
        attacker has hit defender


  2.2.1 Monster
    The following is some general features all monsters have
    1) distance
      return the absolute distance the monster is to the player (Taking walls into account)
    2) checkMove
      first check ableMove(), then return true if a certain move could shorten the absolute distance between the player and
      the monster
    3) makeMove
      call checkMove to each four directions, swap the node content(' ' and 'S', for example), to make it look like the monster
      is moving. Also, update the monster position so that the monster's position is actually moved
      (P.s. this function is not the best practice, since I didn't come up with a better idea at first)
    4) fightM
      check if the player has an hp> 0. If so, attack the player. Notice that this function is a virtual function and may be
      override by different kinds of monsters to render different message.


  2.2.1 Different Monsters
  2.2.1.1 Snakewoman
    Snakewoman makeMove() only the distance() <= 5. When it fights with the player, it has a 20% chance to put the player
    into sleep, which is acheived by overriding fightM().

  2.2.1.2 Goblin
    Goblin first checks its position on Goblin map. If at its position the goblin map is having a value less than the smell distance,
    the goblin will makeMove()

    (p.s. A potential bug could happen if we tune the smellDistance less than 6 and the player uses the magic fangs to put the goblin
    into sleep and runs 6 grids away. When the Goblin is awake, it might still chase the player. However, since the goblin should have
    15 for smell distance by default, there is no need to worry about this issue)

  2.2.1.3 Dragon
    Dragon doesn't move, so in its move() function, it has 10% chance to regenerate one hp.

  2.2.1.4 Bogeyman
    Snakewoman makeMove() only the distance() <= 3.

  2.2.2 Player
    The Player is the actor that the users can manipulate. It will win only if it gets the golden idol. When the player
    has hp < 0, the game is over and the player dies.

    It has several functions that worth discussing here.
    1) Action
    This function is called in each round of the game. It will get a character from the user, analyze the character, and
    call different functions for subsequent movements. For instance, if a user presses 'i', action would call the inspect()
    function
    2) Inspect
    This function is called when the user presses 'i'. It will get another character by calling getCharacter() and do
    nothing
    3) Grab
    This function is called when the user presses 'g'. It will check if users' menu is full first, then check if there is any
    item at the player's current location. If so, it will
    A special case of golden idol is also written in this function.
    4) Cheat
    Set hp to 50, set strength to 50
    5) Utilize
    When the player calls 'r' or 'w', this function is called. It will check if the player could use the object, let player wield
    a new weapon or read a scroll, and update the messages.
*/

3. Non-trivial Algorithm
3.1 Room and Corridor Generators
3.2 Teleportation of the player
3.3 fight
3.4 Messages on the screen
